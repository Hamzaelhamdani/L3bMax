<template>
  <div class="container">
    <div class="header">
      <text class="back-btn" onclick="goBack">‚Üê Retour</text>
      <text class="title">ü™ô Pile ou Face</text>
    </div>
    
    <div class="game-area">
      <div class="coin-container">
        <div class="coin {{coinState}}" id="coin">
          <div class="coin-side heads">
            <text class="coin-text">PILE</text>
          </div>
          <div class="coin-side tails">
            <text class="coin-text">FACE</text>
          </div>
        </div>
      </div>
      
      <div class="result-area">
        <text class="result-text" if="{{result}}">{{result}}</text>
        <text class="prediction-text" if="{{prediction}}">Votre pr√©diction: {{prediction}}</text>
      </div>
      
      <div class="prediction-buttons" if="{{!isFlipping && !result}}">
        <text class="pred-btn" onclick="makePrediction" data-choice="PILE">PILE</text>
        <text class="pred-btn" onclick="makePrediction" data-choice="FACE">FACE</text>
      </div>
      
      <div class="action-buttons">
        <text class="flip-btn" onclick="flipCoin" if="{{prediction && !isFlipping}}">Lancer la pi√®ce!</text>
        <text class="reset-btn" onclick="resetGame" if="{{result}}">Nouvelle partie</text>
      </div>
      
      <div class="stats">
        <text class="stat">Victoires: {{wins}}</text>
        <text class="stat">Total: {{totalFlips}}</text>
      </div>
    </div>
  </div>
</template>

<style>
  .container {
    flex-direction: column;
    background-color: #000000;
    height: 100%;
    padding: 20px;
  }
  
  .header {
    flex-direction: row;
    align-items: center;
    margin-bottom: 30px;
  }
  
  .back-btn {
    color: #FF7900;
    font-size: 18px;
    font-weight: bold;
    padding: 10px;
  }
  
  .title {
    color: #FFFFFF;
    font-size: 24px;
    font-weight: bold;
    margin-left: 20px;
  }
  
  .game-area {
    flex-direction: column;
    align-items: center;
    flex: 1;
  }
  
  .coin-container {
    margin: 40px 0;
    perspective: 1000px;
  }
  
  .coin {
    width: 120px;
    height: 120px;
    position: relative;
    transform-style: preserve-3d;
    transition: transform 1s;
  }
  
  .coin.flipping {
    animation: flip 1s ease-in-out;
  }
  
  .coin-side {
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 60px;
    background-color: #FF7900;
    border: 4px solid #FFFFFF;
    align-items: center;
    justify-content: center;
    backface-visibility: hidden;
  }
  
  .heads {
    transform: rotateY(0deg);
  }
  
  .tails {
    transform: rotateY(180deg);
  }
  
  .coin.show-tails .heads {
    transform: rotateY(-180deg);
  }
  
  .coin.show-tails .tails {
    transform: rotateY(0deg);
  }
  
  .coin-text {
    color: #FFFFFF;
    font-size: 16px;
    font-weight: bold;
  }
  
  .result-area {
    flex-direction: column;
    align-items: center;
    margin: 20px 0;
  }
  
  .result-text {
    color: #FF7900;
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 10px;
  }
  
  .prediction-text {
    color: #FFFFFF;
    font-size: 16px;
  }
  
  .prediction-buttons {
    flex-direction: row;
    gap: 20px;
    margin: 20px 0;
  }
  
  .pred-btn {
    padding: 15px 25px;
    background-color: #FF7900;
    color: #FFFFFF;
    font-size: 18px;
    font-weight: bold;
    border-radius: 8px;
    text-align: center;
    min-width: 80px;
  }
  
  .action-buttons {
    margin: 20px 0;
  }
  
  .flip-btn {
    padding: 20px 40px;
    background-color: #FF7900;
    color: #FFFFFF;
    font-size: 20px;
    font-weight: bold;
    border-radius: 10px;
    text-align: center;
  }
  
  .reset-btn {
    padding: 15px 30px;
    background-color: #666666;
    color: #FFFFFF;
    font-size: 16px;
    font-weight: bold;
    border-radius: 8px;
    text-align: center;
  }
  
  .stats {
    flex-direction: row;
    gap: 30px;
    margin-top: 40px;
  }
  
  .stat {
    color: #FFFFFF;
    font-size: 16px;
    text-align: center;
  }
  
  @keyframes flip {
    0% { transform: rotateY(0deg); }
    50% { transform: rotateY(1800deg); }
    100% { transform: rotateY(1800deg); }
  }
</style>

<script>
  export default {
    data: {
      coinState: '',
      prediction: '',
      result: '',
      isFlipping: false,
      wins: 0,
      totalFlips: 0
    },
    
    makePrediction(e) {
      this.prediction = e.target.attr.dataChoice;
    },
    
    flipCoin() {
      if (this.isFlipping || !this.prediction) return;
      
      this.isFlipping = true;
      this.coinState = 'flipping';
      this.result = '';
      
      // G√©n√©rer le r√©sultat
      const outcomes = ['PILE', 'FACE'];
      const actualResult = outcomes[Math.floor(Math.random() * 2)];
      
      setTimeout(() => {
        this.coinState = actualResult === 'FACE' ? 'show-tails' : '';
        this.totalFlips++;
        
        if (this.prediction === actualResult) {
          this.result = `üéâ Gagn√©! C'est ${actualResult}!`;
          this.wins++;
        } else {
          this.result = `‚ùå Perdu! C'√©tait ${actualResult}`;
        }
        
        this.isFlipping = false;
      }, 1000);
    },
    
    resetGame() {
      this.coinState = '';
      this.prediction = '';
      this.result = '';
      this.isFlipping = false;
    },
    
    goBack() {
      this.$app.router.back();
    }
  }
</script>
